#!/usr/bin/env node
"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}var FS=_interopDefault(require("fs-extra")),Minimist=_interopDefault(require("minimist")),rollup=require("rollup"),nodePlugin=_interopDefault(require("rollup-plugin-commonjs")),babelPlugin=_interopDefault(require("rollup-plugin-babel")),terserPlugin=_interopDefault(require("rollup-plugin-terser")),bundlesizePlugin=_interopDefault(require("rollup-plugin-bundle-size")),noderesolvePlugin=_interopDefault(require("rollup-plugin-node-resolve"));const SHEBANG="#!/usr/bin/env node";let args=Minimist(process.argv,{alias:{w:"watch",i:"input"},default:{watch:!1}}),pkg=FS.readJSONSync("package.json"),bundleInput=()=>pkg.source?pkg.source:FS.existsSync("index.js")?"index.js":FS.existsSync("src/index.js")?"src/index.js":void 0,bundleExternals=()=>{let dependencies=[...Object.keys(pkg.dependencies||{}),...Object.keys(pkg.peerDependencies||{})];return dependency=>dependency.startsWith("@babel/runtime")?dependencies.includes("@babel/runtime"):dependencies.includes(dependency)},bundleExecutables=()=>{if(null!=pkg.bin){if("string"==typeof pkg.bin)return[pkg.bin];if("object"==typeof pkg.bin)return Object.values(pkg.bin)}return[]},bundlePlugins=()=>{let babel=babelPlugin({runtimeHelpers:!0}),node=nodePlugin(),terser=terserPlugin.terser({mangle:!1,safari10:!0,sourcemap:!0});return[babel,noderesolvePlugin(),node,terser,bundlesizePlugin()]},run=async()=>{let input={input:bundleInput(),external:bundleExternals(),plugins:bundlePlugins()},output=[],types={main:"cjs",module:"es","umd:main":"umd"},executables=bundleExecutables();for(let prop in types){let file=pkg[prop];null!=file&&output.push({file:file,format:types[prop],banner:executables.includes(file)&&SHEBANG,sourcemap:!0})}if(args.watch){(await rollup.watch({...input,output:output})).on("event",event=>{event.error&&console.error(event.error.message)})}else try{let bundle=await rollup.rollup(input);for(let config of output)await bundle.write(config)}catch(error){console.error(error.message)}};run();
//# sourceMappingURL=index.js.map
